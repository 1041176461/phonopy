#!/usr/bin/env python

import numpy as np
from phonopy.phonon.tetrahedron_mesh import TetrahedronMesh

def fracval(frac):
    if frac.find('/') == -1:
        return float(frac)
    else:
        x = frac.split('/')
        return float(x[0]) / float(x[1])

class GammaDOS:
    def __init__(self,
                 gamma,
                 cell,
                 frequencies,
                 mesh,
                 grid_address,
                 grid_mapping_table,
                 ir_grid_points,
                 grid_order=None):
        self._gamma = gamma
        self._tetrahedron_mesh = TetrahedronMesh(
            cell,
            frequencies,
            mesh,
            grid_address,
            grid_mapping_table,
            ir_grid_points)

        min_freq = min(frequencies.ravel())
        max_freq = max(frequencies.ravel())
        self._frequency_points = np.linspace(min_freq, max_freq, 100)
        self._gdos = np.zeros(
            (len(gamma), len(self._frequency_points), 2), dtype='double')
        self._run_tetrahedron_method()

    def get_gdos(self):
        return self._frequency_points, self._gdos
        
    def _run_tetrahedron_method(self):
        num_freqs = len(self._frequency_points)
        thm = self._tetrahedron_mesh
        for j, value in enumerate(('J', 'I')):
            thm.set(value=value, frequency_points=self._frequency_points)
            for i, iw in enumerate(thm): 
                for k in range(num_freqs):
                    for l in range(len(self._gamma)): # at temperatures
                        mk = self._gamma[l, i]
                        for ib in range(self._gamma.shape[2]):
                            self._gdos[l, k, j] += iw[k, ib] * mk[ib]
        self._gdos *= np.prod(mesh)

if __name__ == '__main__':
    """Incremental kappa with respect to frequency and the derivative"""

    import h5py
    import sys
    from phonopy.interface.vasp import read_vasp
    from phonopy.structure.cells import get_primitive
    from phonopy.structure.symmetry import Symmetry
    from phonopy.structure.grid_points import GridPoints
    import argparse

    parser = argparse.ArgumentParser(description="Show unit cell volume")
    parser.add_argument("--pa", dest="primitive_axis",
                        default="1 0 0 0 1 0 0 0 1", help="Primitive matrix")
    parser.add_argument("--mesh", dest="mesh", default="1 1 1",
                         help="Mesh numbers")
    parser.add_argument('filenames', nargs='*')
    args = parser.parse_args()
    
    cell = read_vasp(args.filenames[0])
    primitive = get_primitive(cell, np.reshape(
        [fracval(x) for x in args.primitive_axis.split()], (3, 3)))

    f = h5py.File(args.filenames[1])
    mesh = np.array([int(x) for x in args.mesh.split()], dtype='intc')
    gamma = f['gamma']
    frequencies = f['frequency'][:]
    temperatures = f['temperature'][:]

    symmetry = Symmetry(primitive)
    rotations = symmetry.get_pointgroup_operations()
    gp = GridPoints(mesh,
                    np.linalg.inv(primitive.get_cell()),
                    rotations=rotations)
    grid_address = gp.get_grid_address()
    grid_mapping_table = gp.get_grid_mapping_table()
    ir_grid_points = gp.get_ir_grid_points()

    gamma_dos = GammaDOS(gamma,
                         primitive,
                         frequencies,
                         mesh,
                         grid_address,
                         grid_mapping_table,
                         ir_grid_points)
                         
    freq_points, gdos = gamma_dos.get_gdos()

    for i, gdos_t in enumerate(gdos):
        print "# %d K" % temperatures[i], gamma[i].sum(axis=0).sum(axis=0)
        for f, g in zip(freq_points, gdos_t): # show kappa_xx
            print ("%f " * 3) % (f, g[0], g[1])
        print
        print
