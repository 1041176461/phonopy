from phonopy import Phonopy
from phonopy.interface.vasp import read_vasp_from_strings
from phonopy.hphonopy.file_IO import parse_FORCE_SETS_from_strings, parse_BORN_from_strings
from phonopy.group_velocity import GroupVelocity
import numpy as np

def get_band(q_start, q_end, ndiv):
    band = []
    for i in range(ndiv + 1):
        band.append(np.array(q_start) +
                    (np.array(q_end) - np.array(q_start)) / ndiv * i)
    return band


poscar_str = """Mg O                                    
   1.00000000000000     
     4.2555564654942897    0.0000000000000000    0.0000000000000000
     0.0000000000000000    4.2555564654942888    0.0000000000000000
     0.0000000000000000    0.0000000000000000    4.2555564654942897
   4   4
Direct
  0.0000000000000000  0.0000000000000000  0.0000000000000000
  0.0000000000000000  0.5000000000000000  0.5000000000000000
  0.5000000000000000  0.0000000000000000  0.5000000000000000
  0.5000000000000000  0.5000000000000000  0.0000000000000000
  0.5000000000000000  0.5000000000000000  0.5000000000000000
  0.5000000000000000  0.0000000000000000  0.0000000000000000
  0.0000000000000000  0.5000000000000000  0.0000000000000000
  0.0000000000000000  0.0000000000000000  0.5000000000000000"""

force_sets_str = """64   
2    

1    
  0.0100000000000000   0.0000000000000000   0.0000000000000000
  -0.1088198900    0.0000000000    0.0000000000
   0.0156863000    0.0000000000    0.0000000000
  -0.0000352500    0.0000000000    0.0000000000
   0.0006305100    0.0000000000    0.0000000000
  -0.0000352500    0.0000000000    0.0000000000
   0.0006305100    0.0000000000    0.0000000000
  -0.0011054800    0.0000000000    0.0000000000
   0.0011408000    0.0000000000    0.0000000000
  -0.0044795200   -0.0000258000   -0.0000258000
   0.0027197700    0.0000014500    0.0000014500
  -0.0044795200    0.0000258000   -0.0000258000
   0.0027197700   -0.0000014500    0.0000014500
  -0.0044795200   -0.0000258000    0.0000258000
   0.0027197700    0.0000014500   -0.0000014500
  -0.0044795200    0.0000258000    0.0000258000
   0.0027197700   -0.0000014500   -0.0000014500
   0.0062002400    0.0000000000    0.0154968700
   0.0061531200    0.0000000000   -0.0153521200
  -0.0000368000    0.0000000000   -0.0003036700
  -0.0000292400    0.0000000000    0.0002990600
   0.0062002400    0.0000000000   -0.0154968700
   0.0061531200    0.0000000000    0.0153521200
  -0.0000368000    0.0000000000    0.0003036700
  -0.0000292400    0.0000000000   -0.0002990600
   0.0062002400    0.0154968700    0.0000000000
   0.0061531200   -0.0153521200    0.0000000000
   0.0062002400   -0.0154968700    0.0000000000
   0.0061531200    0.0153521200    0.0000000000
  -0.0000368000   -0.0003036700    0.0000000000
  -0.0000292400    0.0002990600    0.0000000000
  -0.0000368000    0.0003036700    0.0000000000
  -0.0000292400   -0.0002990600    0.0000000000
  -0.0003027800   -0.0025970700   -0.0025970700
  -0.0003166700    0.0025817700    0.0025817700
  -0.0003027800    0.0025970700   -0.0025970700
  -0.0003166700   -0.0025817700    0.0025817700
  -0.0003027800   -0.0025970700    0.0025970700
  -0.0003166700    0.0025817700   -0.0025817700
  -0.0003027800    0.0025970700    0.0025970700
  -0.0003166700   -0.0025817700   -0.0025817700
   0.0120130500    0.0000000000    0.0000000000
   0.0099366300    0.0000000000    0.0000000000
   0.0004737700    0.0000000000    0.0000000000
   0.0004561400    0.0000000000    0.0000000000
   0.0004737700    0.0000000000    0.0000000000
   0.0004561400    0.0000000000    0.0000000000
   0.0000247500    0.0000000000    0.0000000000
   0.0000175600    0.0000000000    0.0000000000
   0.0130784500   -0.0000492300    0.0000000000
  -0.0058480900    0.0000004400    0.0000000000
   0.0130784500    0.0000492300    0.0000000000
  -0.0058480900   -0.0000004400    0.0000000000
   0.0012923900    0.0000070500    0.0000000000
  -0.0014169000    0.0000003800    0.0000000000
   0.0012923900   -0.0000070500    0.0000000000
  -0.0014169000   -0.0000003800    0.0000000000
   0.0130784500    0.0000000000   -0.0000492300
  -0.0058480900    0.0000000000    0.0000004400
   0.0012923900    0.0000000000    0.0000070500
  -0.0014169000    0.0000000000    0.0000003800
   0.0130784500    0.0000000000    0.0000492300
  -0.0058480900    0.0000000000   -0.0000004400
   0.0012923900    0.0000000000   -0.0000070500
  -0.0014169000    0.0000000000   -0.0000003800

33   
  0.0100000000000000   0.0000000000000000   0.0000000000000000
  -0.0003358000   -0.0025844000   -0.0025844000
  -0.0003213600    0.0025938900    0.0025938900
  -0.0003358000    0.0025844000   -0.0025844000
  -0.0003213600   -0.0025938900    0.0025938900
  -0.0003358000   -0.0025844000    0.0025844000
  -0.0003213600    0.0025938900   -0.0025938900
  -0.0003358000    0.0025844000    0.0025844000
  -0.0003213600   -0.0025938900   -0.0025938900
   0.0099614500    0.0000000000    0.0000000000
   0.0119517100    0.0000000000    0.0000000000
   0.0004415000    0.0000000000    0.0000000000
   0.0004518500    0.0000000000    0.0000000000
   0.0004415000    0.0000000000    0.0000000000
   0.0004518500    0.0000000000    0.0000000000
  -0.0000010900    0.0000000000    0.0000000000
   0.0000068000    0.0000000000    0.0000000000
   0.0130611100    0.0000167900    0.0000000000
  -0.0058664500    0.0000038700    0.0000000000
   0.0130611100   -0.0000167900    0.0000000000
  -0.0058664500   -0.0000038700    0.0000000000
   0.0012740000    0.0000022900    0.0000000000
  -0.0014349700    0.0000020600    0.0000000000
   0.0012740000   -0.0000022900    0.0000000000
  -0.0014349700   -0.0000020600    0.0000000000
   0.0130611100    0.0000000000    0.0000167900
  -0.0058664500    0.0000000000    0.0000038700
   0.0012740000    0.0000000000    0.0000022900
  -0.0014349700    0.0000000000    0.0000020600
   0.0130611100    0.0000000000   -0.0000167900
  -0.0058664500    0.0000000000   -0.0000038700
   0.0012740000    0.0000000000   -0.0000022900
  -0.0014349700    0.0000000000   -0.0000020600
  -0.1112493000    0.0000000000    0.0000000000
   0.0066703000    0.0000000000    0.0000000000
  -0.0030338100    0.0000000000    0.0000000000
   0.0043827300    0.0000000000    0.0000000000
  -0.0030338100    0.0000000000    0.0000000000
   0.0043827300    0.0000000000    0.0000000000
  -0.0010215800    0.0000000000    0.0000000000
   0.0010409800    0.0000000000    0.0000000000
  -0.0043131000    0.0000185100    0.0000185100
   0.0031230100   -0.0000026400   -0.0000026400
  -0.0043131000   -0.0000185100    0.0000185100
   0.0031230100    0.0000026400   -0.0000026400
  -0.0043131000    0.0000185100   -0.0000185100
   0.0031230100   -0.0000026400    0.0000026400
  -0.0043131000   -0.0000185100   -0.0000185100
   0.0031230100    0.0000026400    0.0000026400
   0.0072840800    0.0000000000    0.0101959800
   0.0073169900    0.0000000000   -0.0102886900
  -0.0001182900    0.0000000000    0.0011847700
  -0.0001301700    0.0000000000   -0.0011916700
   0.0072840800    0.0000000000   -0.0101959800
   0.0073169900    0.0000000000    0.0102886900
  -0.0001182900    0.0000000000   -0.0011847700
  -0.0001301700    0.0000000000    0.0011916700
   0.0072840800    0.0101959800    0.0000000000
   0.0073169900   -0.0102886900    0.0000000000
   0.0072840800   -0.0101959800    0.0000000000
   0.0073169900    0.0102886900    0.0000000000
  -0.0001182900    0.0011847700    0.0000000000
  -0.0001301700   -0.0011916700    0.0000000000
  -0.0001182900   -0.0011847700    0.0000000000
  -0.0001301700    0.0011916700    0.0000000000"""

born_str = """14.400
3.38121106 0 0 0 3.38121106 0 0 0 3.38121106
1.9715466666666668 0 0 0 1.9715466666666668 0 0 0 1.9715466666666668
-1.9721233333333332 0 0 0 -1.9721233333333332 0 0 0 -1.9721233333333332"""

#
# initial settings
#
cell = read_vasp_from_strings(poscar_str)
phonon = Phonopy(cell, np.diag([2, 2, 2]))
force_sets = parse_FORCE_SETS_from_strings(force_sets_str,
                                           cell.get_number_of_atoms() * 8)
phonon.set_force_sets(force_sets)
phonon.set_post_process(primitive_matrix=[[0, 0.5, 0.5],
                                          [0.5, 0, 0.5],
                                          [0.5, 0.5, 0]],
                        is_nac=True)
born_params = parse_BORN_from_strings(born_str,
                                      phonon.get_primitive())
phonon.set_nac_params(born_params)                                      

print phonon.get_symmetry().get_international_table()
primitive = phonon.get_primitive()
reclat = np.linalg.inv(primitive.get_cell())
print reclat

ndiv = 100
band = get_band([0.0, 0.0, 0.0], [0.5, 0.5, 0.0], ndiv)
bands = [band]
phonon.set_band_structure(bands)

#
# Run
#
band_index = 2
vg = GroupVelocity(phonon.get_dynamical_matrix(), phonon.get_primitive())
q_points = [[q, [1, 1, 0]] for q in band]

vg.set_q_points(q_points)
velo = vg.get_group_velocity()[:, :, band_index]
band = phonon.get_band_structure()
distances = band[1]
freqs = band[2]

d_prev = distances[0][0]
f_prev = freqs[0][:, band_index][0]
print d_prev, f_prev
for d, f, v in zip(distances[0][1:], freqs[0][:, band_index][1:], velo[1:]):
    velo = (f_prev - f) / (d_prev - d)
    print d, f, velo, v[2], velo / v[2]
    d_prev = d
    f_prev = f

phonon.plot_band_structure().show()


